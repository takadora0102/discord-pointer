// ‰øÆÊ≠£Ê∏à„ÅøÂÆåÂÖ®ÁâàÔºö„Ç¢„Ç§„ÉÜ„É†‰ΩøÁî®Âá¶ÁêÜÂê´„ÇÄ

const { Client, GatewayIntentBits, Partials, REST, Routes, SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, ModalBuilder, TextInputBuilder, Events } = require('discord.js');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const TOKEN = process.env.DISCORD_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers],
  partials: [Partials.Channel]
});

const itemData = [
  { id: 'rename_self', label: 'üé≠ ÂêçÂâçÂ§âÊõ¥ÔºàËá™ÂàÜÔºâ', price: 1000 },
  { id: 'shield', label: 'üõ°Ô∏è „Ç∑„Éº„É´„Éâ', price: 300 },
  { id: 'scope', label: 'üî≠ ÊúõÈÅ†Èè°', price: 100 }
];

client.once('ready', () => console.log('Bot Ready'));

client.on(Events.InteractionCreate, async interaction => {
  const userId = interaction.user.id;
  const member = await interaction.guild.members.fetch(userId);

  if (interaction.isChatInputCommand() && interaction.commandName === 'register') {
    await interaction.deferReply({ ephemeral: true });
    const { data: existing } = await supabase.from('points').select('*').eq('user_id', userId).single();
    if (existing) return interaction.editReply({ content: '„Åô„Åß„Å´ÁôªÈå≤Ê∏à„Åø„Åß„Åô„ÄÇ' });
    const role = interaction.guild.roles.cache.find(r => r.name === 'SERF');
    if (role) await member.roles.add(role);
    await member.setNickname(`„ÄêSERF„Äë${member.user.username}`).catch(() => {});
    await supabase.from('points').insert({ user_id: userId, point: 1000 });
    return interaction.editReply({ content: 'ÁôªÈå≤ÂÆå‰∫ÜÔºÅ1000p ‰ªò‰∏é„Åï„Çå„Åæ„Åó„Åü„ÄÇ' });
  }

  if (interaction.isChatInputCommand() && interaction.commandName === 'profile') {
    await interaction.deferReply({ ephemeral: true });
    const { data } = await supabase.from('points').select('*').eq('user_id', userId).single();
    if (!data) return interaction.editReply({ content: 'Êú™ÁôªÈå≤„Åß„Åô„ÄÇ/register „ÇíÂÖà„Å´ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ' });
    const shield = data.shield_until ? `üõ°Ô∏è „Ç∑„Éº„É´„ÉâÊúâÂäπ (${data.shield_until})` : '„Å™„Åó';
    const locked = data.name_locked_until ? `‚è≥ ÂêçÂâçÂ§âÊõ¥‰∏çÂèØ (${data.name_locked_until})` : '„Å™„Åó';
    return interaction.editReply({ content: `üí∞ ÊâÄÊåÅ„Éù„Ç§„É≥„Éà: ${data.point}p\n${shield}\n${locked}` });
  }

  if (interaction.isChatInputCommand() && interaction.commandName === 'shop') {
    const sub = interaction.options.getSubcommand();
    if (sub !== 'item') return;
    if (!member.permissions.has('Administrator')) return interaction.reply({ content: 'ÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ„Åß„Åô„ÄÇ', ephemeral: true });
    await interaction.deferReply({ ephemeral: false });
    const embed = new EmbedBuilder().setTitle('üõçÔ∏è „Ç¢„Ç§„ÉÜ„É†„Ç∑„Éß„ÉÉ„Éó').setDescription('Êà¶Áï•„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß');
    itemData.forEach(item => embed.addFields({ name: item.label, value: `‰æ°Ê†º: ${item.price}p`, inline: true }));
    const rows = [];
    for (let i = 0; i < itemData.length; i += 5) {
      rows.push(new ActionRowBuilder().addComponents(
        itemData.slice(i, i + 5).map(item =>
          new ButtonBuilder().setCustomId(`item_${item.id}`).setLabel(item.label).setStyle(ButtonStyle.Secondary))));
    }
    await interaction.editReply({ embeds: [embed], components: rows });
  }

  if (interaction.isButton() && interaction.customId.startsWith('item_')) {
    await interaction.deferReply({ ephemeral: true });
    const itemId = interaction.customId.replace('item_', '');
    const item = itemData.find(i => i.id === itemId);
    if (!item) return interaction.editReply({ content: 'ÁÑ°Âäπ„Å™„Ç¢„Ç§„ÉÜ„É†„Åß„Åô„ÄÇ' });
    const { data: userData } = await supabase.from('points').select('*').eq('user_id', userId).single();
    if (!userData || userData.point < item.price) return interaction.editReply({ content: '„Éù„Ç§„É≥„Éà„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ' });

    if (itemId === 'rename_self') {
      const modal = new ModalBuilder()
        .setCustomId('modal_rename_self')
        .setTitle('ÂêçÂâçÂ§âÊõ¥ÔºàËá™ÂàÜÔºâ')
        .addComponents(new ActionRowBuilder().addComponents(
          new TextInputBuilder().setCustomId('new_name').setLabel('Êñ∞„Åó„ÅÑÂêçÂâç').setStyle(1).setRequired(true)
        ));
      return interaction.showModal(modal);
    }

    if (itemId === 'shield') {
      const now = new Date();
      const until = new Date(now.getTime() + 24 * 60 * 60 * 1000);
      if (userData.shield_until && new Date(userData.shield_until) > now) {
        return interaction.editReply({ content: '„Åô„Åß„Å´„Ç∑„Éº„É´„Éâ„ÅåÊúâÂäπ„Åß„Åô„ÄÇ' });
      }
      await supabase.from('points').update({ point: userData.point - item.price, shield_until: until.toISOString() }).eq('user_id', userId);
      return interaction.editReply({ content: 'üõ°Ô∏è „Ç∑„Éº„É´„Éâ„ÇíÂ±ïÈñã„Åó„Åæ„Åó„ÅüÔºÅ' });
    }

    if (itemId === 'scope') {
      const modal = new ModalBuilder()
        .setCustomId('modal_scope')
        .setTitle('üî≠ „Ç∑„Éº„É´„ÉâÁ¢∫Ë™ç')
        .addComponents(new ActionRowBuilder().addComponents(
          new TextInputBuilder().setCustomId('target_id').setLabel('„É¶„Éº„Ç∂„ÉºID').setStyle(1).setRequired(true)
        ));
      return interaction.showModal(modal);
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === 'modal_rename_self') {
    await interaction.deferReply({ ephemeral: true });
    const newName = interaction.fields.getTextInputValue('new_name');
    const member = await interaction.guild.members.fetch(userId);
    const updatedNick = `„Äê${member.displayName.split('„Äë')[0].replace('„Äê', '')}„Äë${newName}`;
    await member.setNickname(updatedNick).catch(() => {});
    const { data } = await supabase.from('points').select('*').eq('user_id', userId).single();
    await supabase.from('points').update({ point: data.point - 1000 }).eq('user_id', userId);
    return interaction.editReply({ content: `‚úÖ ÂêçÂâç„Çí„Äå${updatedNick}„Äç„Å´Â§âÊõ¥„Åó„Åæ„Åó„Åü„ÄÇ` });
  }

  if (interaction.isModalSubmit() && interaction.customId === 'modal_scope') {
    await interaction.deferReply({ ephemeral: true });
    const targetId = interaction.fields.getTextInputValue('target_id');
    const { data: target } = await supabase.from('points').select('*').eq('user_id', targetId).single();
    const now = new Date();
    const shielded = target && target.shield_until && new Date(target.shield_until) > now;
    await supabase.from('points').update({ point: supabase.literal(`point - 100`) }).eq('user_id', userId);
    return interaction.editReply({ content: shielded ? 'üõ°Ô∏è „Ç∑„Éº„É´„Éâ‰∏≠„Åß„Åô„ÄÇ' : 'üõ°Ô∏è „Ç∑„Éº„É´„Éâ„ÅØ‰Ωø„Çè„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ' });
  }
});

const commands = [
  new SlashCommandBuilder().setName('register').setDescription('ÂàùÊúüÁôªÈå≤'),
  new SlashCommandBuilder().setName('profile').setDescription('„Éó„É≠„Éï„Ç£„Éº„É´Á¢∫Ë™ç'),
  new SlashCommandBuilder().setName('shop').setDescription('„Ç∑„Éß„ÉÉ„ÉóË°®Á§∫').addSubcommand(s => s.setName('item').setDescription('„Ç¢„Ç§„ÉÜ„É†'))
].map(c => c.toJSON());

const rest = new REST({ version: '10' }).setToken(TOKEN);
(async () => {
  try {
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    await client.login(TOKEN);
  } catch (e) {
    console.error(e);
  }
})();
